基于注解装配：
	@Component：标注在类上，告诉Spring容器创建一个Bean对象，在三层之外。
	@Controller：指定一个控制层的Bean。
	@Service：指定一个服务层的Bean。
	@Repository：指定一个数据访问层的Bean。
	@Scope：指定Bean的作用域。
	@Value：标注在属性上，给基本数据类型的属性赋值。
	@Resource：标注在属性上，给属性注入值，给引用类型的属性赋值，注入一个对象。按提供的名字进行装配，如果不提供名字，去找和属性名一样的Bean对象，如果没有，按类型查找。
	@AutoWired：自动装配，标注在属性上，根据类型进行装配，如果同一类型的对象有多个，结合@Qualifier使用
	@Qualifier：指明要装配的bean名。

Bean的自动装配：
	通过<bean>的autowire属性实现。
	autowire属性的值：
		default：由<bean>的上级元素<beans>的default-autowire属性值确定。
		byName：根据<bean>元素id属性的值自动装配。
		byTepe：根据<bean>元素的数据类型（Type）自动装配，如果一个Bean的数据类型，兼容另一个Bean中的数据类型，则自动装配。
		constructor：根据构造函数参数的数据类型，进行byType模式的自动装配。
		no：默认值，不使用自动装配，Bean依赖必须通过<ref>元素或ref属性定义。

		<bean id="Student2" class="cn.edu.hbsi.domain.Student" autowire="byName">
        		<constructor-arg name="id" value="2"/>
        		<constructor-arg name="name" value="吾名悸动"/>
    		</bean>

Bean的生命周期
	Bean在不同作用域内的生命周期：
	Bean的生命周期是指Bean实例被创建、初始化和销毁的过程。在singleton作用域中，Spring容器可以管理Bean的生命周期，控制着Bean的创建、初始化和销毁。在prototype作用域中， Spring容器只负责创建Bean实例，不会管理其生命周期。

	Bean生命周期的两个时间节点：
		Bean实例初始化后和Bean实例销毁前。
		监控时间节点的方式：
			1）注解：
				1.PostConstruct：用于监控Bean对象初始化节点；
				2.PreDestroy：监控Bean对象销毁节点。 
					//销毁Spring容器中的所有Bean
    					AbstractApplicationContext ac=(AbstractApplicationContext) applicationContext;
    					ac.registerShutdownHook();

			2)XML配置文件：
				<bean id="Student2" class="cn.edu.hbsi.domain.Student" init-method="init2" destroy-method="destory2">
        				<constructor-arg name="id" value="2"/>
        				<constructor-arg name="name" value="吾名悸动"/>
    				</bean>

Spring AOP 面向切面的编程
	AOP是基于OOP的基础上新的编程思想，是指在程序的运行期间，将某段代码动态的切入到指定位置进行运行的编程方式。

	CustomerService：
		addCustomer()
		updateCustomer()
		deleteCustomer()
		seelctCustomer()
		向添加和修改两个方法增加日志管理的内容。
	日志记录类：Log
		printLog()

	重点：
	1.切面（Aspect）：包含公共功能（日志管理，事务管理）的类。
	2.连接点（Joinpoint）：可以被增强的方法。addCustomer()，updateCustomer()，deleteCustomer()，seelctCustomer()
	3.切入点（Pointcut）：将要被增强的方法。addCustomer()，updateCustomer()。
	4.通知/增强（Advice）：切面中的方法，切面中包含增强功能的方法，printLog()。

	理解：
	5.目标对象（Target）：指被插入切面的方法。
	6.织入（Weaving）：将切面代码插入到目标对象上，从而生成代理对象的过程。织入可以在编译时，类加载时和运行时完成。在编译时进行织入就是静态代理，而在运行时进行织入则是动态代理。
	7.代理（Proxy）：将通知（增强）应用到目标对象之后，程序动态创建的通知对象，就称为代理。
	8.引介

Spring AOP的默认代理方式：
	默认情况下，Spring AOP使用JDK动态代理，JDK动态代理是通过java.lang.reflect.Proxy 类实现的，可以调用Proxy类的newProxyInstance()方法创建代理对象。JDK动态代理可以实现无侵入式的代码扩展，并且可以在不修改源代码的情况下，增强某些方法。

JDK动态代理：
	在不修改源码的基础上，对原有的方法进行增强。
		1.JDK动态代理：基于接口
		2.CGLib动态代理：没有接口

	在代理类中：
		该类需要实现InvocationHandler接口设置代理类的调用处理程序。在代理类中，通过newProxyInstance()生成代理方法。 
		public class MyProxy implements InvocationHandler {
    			private UserDao userDao;
    			public  Object createProxy(UserDao userDao) {
        			this.userDao = userDao;
        			ClassLoader classLoader = MyProxy.class.getClassLoader(); // 1.类加载器
        			Class[] classes = userDao.getClass().getInterfaces(); // 2.被代理对象实现的所有接口
        			return  Proxy.newProxyInstance(classLoader,classes,this); // 3.返回代理对象
    			}
    		// 所有动态代理类的方法调用，都会交由InvocationHandler接口的invoke()方法去处理。

		newProxyInstance()方法的3个参数 ：
			1.classLoader：表示当前类的类加载器；
			2.classes：表示被代理对象实现的所有接口；
			3.this：表示代理类JdkProxy本身。 